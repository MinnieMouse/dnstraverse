#!/usr/bin/env ruby
# = Summary
# Traverse the DNS from the root exploring all possible ways of
# getting to the final destination domain name.  This is the command
# line interface to the DNSTraverse module.
#
# = Usage
# dnstraverse [options] DOMAIN
#    -t, --type TYPE              Select record type (A, AAAA, SRV, WKS, NS,
#                                   CNAME, SOA, PTR, HINFO, MINFO, MX, TXT, ANY)
#        --root-server HOST       Root DNS server (default - ask local resolver)
#        --[no-]all-root-servers  Find all root servers (default false)
#        --root-aaaa              TODO Look for IPv6 addresses for root servers
#        --follow-aaaa            TODO Only follow AAAA records for referrals
#        --udp-size SIZE          Turn on EDNS0 with given UDP size
#        --max-depth DEPTH        Maximum depth to traverse (default 16)
#        --retries TIMES          Number of 2s retries before timing out (2)
#        --[no-]allow-tcp         Try using tcp if udp truncated (default true)
#        --[no-]always-tcp        Always use tcp (default false)
#
#        --[no-]show-progress     Display progress information (default true)
#        --[no-]show-all-stats    Display statistics as we go (default false)
#        --[no-]show-resolves     Display referral resolutions (default false)
#        --[no-]show-servers      Display list of servers seen (default false)
#        --[no-]show-versions     Display versions of dns servers (default true)
#        --[no-]show-results      Display the results (default true)
#
#        --fast                   Short-cut answers using previous information,
#                                 less accurate but usually ok - by-passes the
#                                 proper simulation of the resolver cache.
#
#    -v, --[no-]verbose           Run verbosely
#    -d, --debug                  Debug mode: One -d for DNSCheck debug
#                                             Two -d also turns on library debug
#    -h, --help                   Show full help
#    -V, --version                Show version and exit
#
# == Example
#   dnstraverse www.nic.uk
#   dnstraverse --fast www.google.com
#   dnstraverse --fast --show-resolves --udp-size 1000 www.microsoft.com
#
# = Copyright
#   Copyright (c) 2008 James Ponder <james@squish.net>
#   Portions Copyright (c) 2003,2004,2005 Roy Arends & Jakob Schlyter
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, version 3 of the License.

require 'optparse'
require 'logger'
require 'rdoc/usage'
require 'pp'

require 'dnstraverse/traverser'
require 'dnstraverse/log'
require 'dnstraverse/fingerprint'

Version = [ 0, 0, 1].freeze

EMPTY_STRING = ''.freeze

def referral_txt_normal(r)
  if r.serverips then
    return "#{r.refid} #{r.server} (#{r.txt_ips})"
  end
  return "#{r.refid} #{r.server}"
end

def referral_txt_verbose(r)
  if r.serverips then
    return sprintf("%s [%s] %s (%s) <%s>", r.refid, r.qname, r.server,
    r.txt_ips, r.bailiwick)
  end
  return sprintf("%s [%s] %s <%s>", r.refid, r.qname, r.server,
  r.bailiwick)
end

# TODO: warnings aren't in referral object any more, they are in bubbled up to response object from decoded_query, and there are several for each referral object as each IP address for a referral could have warnings.
# TODO: display warnings after each response object is created
def progress_main(args)
  o = args[:state]
  r = args[:referral]
  stage = args[:stage]
  return if r.refid.empty?
  case stage
    when :answer then
    if o[:verbose] then
      for warning in r.warnings do
        puts "#{r.refid} WARNING: #{warning}"
      end
    end
    if o[:allstats] then
      r.stats_display(:prefix => "#{r.refid} Results:", :results => false)
    end
    when :start then
    print o[:verbose] ? referral_txt_verbose(r) : referral_txt_normal(r)
    if r.serverips.nil? then
      print " -- resolving"
    end
    print "\n"
    when :answer_fast then
    print o[:verbose] ? referral_txt_verbose(r) : referral_txt_normal(r)
    puts " -- completed earlier"
  end
end

def progress_resolves(args)
  o = args[:state]
  r = args[:referral]
  stage = args[:stage]
  case stage
    when :start then
    print o[:verbose] ? referral_txt_verbose(r) : referral_txt_normal(r)
    print "\n"
    when :answer_fast then
    print o[:verbose] ? referral_txt_verbose(r) : referral_txt_normal(r)
    puts " -- completed earlier"
  end
end

def require_relative(path)
  require File.join(File.dirname(caller[0]), path.to_str)
end

### Main program

options = Hash.new
options[:verbose] = false
options[:debug] = 0
options[:type] = :a
options[:root] = nil
options[:allroots] = false
options[:broken] = false
options[:progress] = true
options[:summary] = true
options[:resolves] = false
options[:servers] = false
options[:versions] = true
options[:domainname] = nil
options[:follow_aaaa] = false
options[:root_aaaa] = false
options[:always_tcp] = false
options[:allow_tcp] = false
options[:allstats] = false
options[:saveobjects] = false
options[:fast] = false
options[:udpsize] = 512
options[:maxdepth] = 16
options[:retries] = 2
options[:results] = true

opts = OptionParser.new
opts.banner = "Usage: #{File.basename($0)} [options] DOMAIN"  
opts.on("-v", "--[no-]verbose") { |o| options[:verbose] = o }
opts.on("-d", "--[no-]debug") { |o| options[:debug]+= 1 }
opts.on("-r", "--root-server HOST") { |o| options[:root] = o }
opts.on("-a", "--all-root-servers") { |o| options[:allroots] = o }
opts.on("-t", "--type TYPE", Dnsruby::Types.constants) { |o| options[:type] = o }
opts.on("--udp-size SIZE") { |o| options[:udpsize] = o }
opts.on("--allow-tcp") { |o| options[:allow_tcp] = o }
opts.on("--always-tcp") { |o| options[:always_tcp] = o }
opts.on("--max-depth DEPTH") { |o| options[:maxdepth] = o }
opts.on("--retries TIMES") { |o| options[:retries] = o }
opts.on("--[no-]follow-aaaa") { |o| options[:follow_aaaa] = o }
opts.on("--[no-]root-aaaa") { |o| options[:root_aaaa] = o }
opts.on("--[no-]show-progress") { |o| options[:progress] = o }
opts.on("--[no-]show-resolves") { |o| options[:resolves] = o }
opts.on("--[no-]show-servers") { |o| options[:servers] = o }
opts.on("--[no-]show-versions") { |o| options[:versions] = o }
opts.on("--[no-]show-all-stats") { |o| options[:allstats] = o }
opts.on("--[no-]show-results") { |o| options[:results] = o }
opts.on("--save-objects") { |o| options[:saveobjects] = o }
opts.on("--fast") { |o| options[:fast] = o }
opts.on_tail("-h", "--help") { RDoc::usage }
opts.on_tail("-V", "--version") { puts Version.join('.'); exit }
begin
  opts.parse!
  if ARGV.size != 1 then
    raise OptionParser::ParseError, "Missing domain name parameter"
  end
  options[:domainname] = ARGV.shift
rescue OptionParser::ParseError => e
  puts e
  RDoc::usage(1, 'Usage')
end
Log.level = options[:debug] > 0 ? Logger::DEBUG : Logger::UNKNOWN
Log.debug {"Options chosen:\n" }
Log.debug { options.map {|x,y| "  #{x}: #{y}" }.join("\n") }
args = { :state => options, :aaaa => options[:follow_aaaa],
  :udpsize => options[:udpsize] }
args[:progress_main] = method(:progress_main) if options[:progress]
args[:progress_resolve] = method(:progress_resolves) if options[:progress] and options[:resolves]
args[:loglevel] = options[:debug] >= 1 ? Logger::DEBUG : Logger::UNKNOWN
args[:libloglevel] = options[:debug] >= 2 ? Logger::DEBUG : Logger::UNKNOWN
args[:always_tcp] = true if options[:always_tcp]
args[:allow_tcp] = true if options[:allow_tcp]
args[:fast] = true if options[:fast]
begin
  traverser = DNSTraverse::Traverser.new(args)
  if options[:root] then
    root = options[:root]
    rootip = root # XXX fix me need to look up IP address if not passed
  else
    begin
     (root, rootip) = traverser.get_a_root(:aaaa => options[:root_aaaa])
    rescue => e
      $stderr.puts "Failed to find a root: #{e}"
      exit 2
    end
  end
  puts "Using #{root} (#{rootip}) as initial root"
  if options[:allroots] then
    begin
      roots = traverser.find_all_roots(:root => root, :rootip => rootip,
                                       :aaaa => options[:root_aaaa] )
    rescue => e
      $stderr.puts "Failed to find all roots: #{e}"
      exit 2
    end
    puts "All roots:"
    for aroot in roots do
      puts "  #{aroot[:name]} #{aroot[:ips].join(', ')}"
    end
  else
    roots = [ { :name => root, :ips => [ rootip ] } ]
  end
  puts "Running query #{options[:domainname]} type #{options[:type]}"
  result = traverser.run_query(:qname => options[:domainname],
                               :qtype => options[:type].to_s, :roots => roots,
                               :maxdepth => options[:maxdepth],
                               :retries => options[:retries])
  puts if options[:progress]
  if options[:servers] then
    puts "The following servers were encountered:"
    fp = options[:versions] ? DNSTraverse::Fingerprint.new : nil
    seen = traverser.servers_encountered
    ss = seen.keys.sort! { |a,b| a.downcase.reverse! <=> b.downcase.reverse! }
    w = 16
    ss.each { |a| w = a.length if a.length > w }
    ss.each do |server|
      for ip in seen[server] do
        ver = ""
        if options[:versions] then
          fpres = fp.fingerprint(ip)
          ver += " #{fpres[:vendor]}" if fpres.has_key?(:vendor)
          ver += " #{fpres[:product]}" if fpres.has_key?(:product)
          ver += " #{fpres[:version]}" if fpres.has_key?(:version)
          ver += " #{fpres[:error]}" if fpres.has_key?(:error)
        end
        printf "%#{w}s: %-15s%s", server, ip, ver
        puts
      end
    end
    puts
  end
  if options[:results] then
    puts "Results:"
    result.stats_display(:results => true, :spacing => true)
  end
rescue Interrupt => e
  $stderr.puts "Interrupted by user"
end
if options[:saveobjects] then
  GC.start
  s = Hash.new
  ObjectSpace.each_object do |o|
    s[o.class]||= 0
    s[o.class]= s[o.class] + 1
  end
  f = File.open("classes.dump", "w")
  s.sort {|a,b| a[1] <=> b[1]}.each do | c |
    f.puts "#{c[1]} #{c[0]}"
  end
  f = File.open("strings.dump", "w")
  ObjectSpace.each_object do |o|
    if o.instance_of? String then
      f.puts o
    end
  end
  f = File.open("hashes.dump", "w")
  ObjectSpace.each_object do |o|
    if o.instance_of? Hash then
      f.puts o.size.to_s
    end
  end
  f = File.open("label.dump", "w")
  ObjectSpace.each_object do |o|
    if o.instance_of? Dnsruby::Name::Label then
      f.puts o.to_s
    end
  end
  f = File.open("referral.dump", "w")
  ObjectSpace.each_object do |o|
    if o.instance_of? DNSTraverse::Referral then
      f.puts o.to_s
    end
  end
end
